import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

export const fetchTodos = createAsyncThunk('todos/fetchTodos', async() => {
    try {
        const response = await axios.get('https://localhost:3000/todos');
        return response.data;
    } catch (error) {
        console.error('Error: ', error.message);
    }
});

export const addTodo = createAsyncThunk('todos/addTodo', async (text) => {
    try {
        const response = await axios.post('https://localhost:3000/todos', { text });
        return response.data;
    } catch (error) {
        console.error('Error: ', error.message);
    }
});

export const toggleTodo = createAsyncThunk('todo/toggleTodo', async ({id, done}) => {
    try {
        const response = await axios.put(`https://localhost:3000/todos/${id}`, { done });
        return response.data;
    } catch (error) {
        console.error('Error: ', error.message);
    }
});

export const deleteTodo = createAsyncThunk('todos/deleteTodo', async (id) => {
    try {
        await axios.delete(`https:localhost:3000/${id}`);
        return id;
    } catch (error) {
        console.error('Error: ', error.message);
    }
});

const todoSlice = createSlice({
    name: 'todos',
    initialState: {
        items: [],
        status: 'idle',  // idle loading succeeded failed
        error: null,
    },
    reducers: {
        toggleAllTodos: (state, action) => {
            const allDone = action.payload;
            state.items.forEach(todo => todo.done = allDone);
        },
    },
    extraReducers: builder => {
        builder
            .addCase(fetchTodos.pending, (state, action) => {
            state.status = 'loading';
        })
            .addCase(fetchTodos.fulfilled, (state, action) => {
                state.items = action.payload;
                state.status = 'succeeded';
            })
            .addCase(fetchTodos.rejected, (state, action) => {
                state.status = 'failed';
            })
            .addCase(toggleTodo.fulfilled, (state, action) => {
                const idx = state.items.findIndex((todo) => todo._id === action.payload._id);
                if(idx !== -1) {
                    state.items[idx].done = action.payload.done;
                }
            })
            .addCase(addTodo.fulfilled, (state, action) => {
                state.items.push(action.payload);
            })
            .addCase(deleteTodo.fulfilled, (state, action) => {
                state.items.filter((todo) => todo._id !== action.payload._id);
            });
    },
});

export const { toggleAllTodos } = todoSlice.actions;  // .actions is an object that containes the action creators automatically generated by reduxtoolkit for the reducers defined in the slice, aka toggleAllTodos
export default todoSlice.reducer;
